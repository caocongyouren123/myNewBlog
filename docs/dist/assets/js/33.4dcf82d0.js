(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{388:function(v,t,_){"use strict";_.r(t);var s=_(0),n=Object(s.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("Boxx"),v._v(" "),_("h2",{attrs:{id:"第一天"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第一天"}},[v._v("#")]),v._v(" 第一天")]),v._v(" "),_("p",[v._v("::: details 1. 常用的集合有哪些？")]),v._v(" "),_("p",[_("strong",[v._v("Map")]),v._v("接口和"),_("strong",[v._v("Collection")]),v._v("接口是所有集合框架的父接口：")]),v._v(" "),_("ul",[_("li",[v._v("Collection接口的子接口包括：Set接口和List接口；")]),v._v(" "),_("li",[v._v("Map接口的实现类主要有："),_("strong",[v._v("HashMap、ConcurrentHashMap、TreeMap、Hashtable")]),v._v("以及"),_("strong",[v._v("Properties")]),v._v("等；")]),v._v(" "),_("li",[v._v("Set接口的实现类主要有："),_("strong",[v._v("HashSet、LinkedHashSet、TreeSet")]),v._v("等；")]),v._v(" "),_("li",[v._v("List接口的实现类主要有："),_("strong",[v._v("ArrayList、LinkedList、Stack、Vector")]),v._v("等。")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 2. 静态变量和成员变量的区别？")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("所属不同：")]),v._v(" 静态变量属于类，所以也成为类变量；成员变量属于对象，所有也成为实例变量（对象变量）；")]),v._v(" "),_("li",[_("strong",[v._v("在内存中出现的时间不同：")]),v._v(" 静态变量只在类创建时加载一次，随着类的加载而加载随着类的消失而消失；成员变量随着对象（也叫实例）的创建而存在，随着对象的消失而消失；")]),v._v(" "),_("li",[_("strong",[v._v("在内存中的位置不同：")]),v._v(" 静态变量存储于方法区里的静态区，成员变量属于对内存；")]),v._v(" "),_("li",[_("strong",[v._v("调用方式不同：")]),v._v(" 静态变量可以通过类名调用，也可以通过对象调用；成员变量只能通过对象调用；")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 3. filter过滤器用过吗？一般用在什么地方？")]),v._v(" "),_("ul",[_("li",[v._v("用过")]),v._v(" "),_("li",[v._v("例如实现Servlet，Jsp或静态html等"),_("strong",[v._v("文件的拦截")]),v._v("，从而实现一些特殊功能。")]),v._v(" "),_("li",[v._v("例如实现URL级别的"),_("strong",[v._v("权限访问控制")]),v._v("、"),_("strong",[v._v("过滤敏感词汇")]),v._v("、压缩响应信息等一些高级功能。")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 4. 多线程一般用在什么地方？")]),v._v(" "),_("ul",[_("li",[v._v("多线程的作用："),_("code",[v._v("充分利用CPU资源，提高CPU使用率")]),v._v("，才用多线程的方式去同时完成几件事情而不相互干扰")]),v._v(" "),_("li",[v._v("用在什么地方：大多情况下，用到多线程主要是需要处理"),_("code",[v._v("大量的IO操作")]),v._v("或处理需要"),_("code",[v._v("耗费大量时间的操作")]),v._v("等等。比如：读写文件等。")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 5. int和Integer的区别？")]),v._v(" "),_("ul",[_("li",[v._v("Integer是int的包装类，而int是Java的一种基本数据类型")]),v._v(" "),_("li",[v._v("Integer是类，必须实例化之后才能使用，而int变量不需要")]),v._v(" "),_("li",[v._v("Integer的默认值是null，而int的默认值是0")]),v._v(" "),_("li",[v._v("Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针只想此对象；而int是直接存储数据值")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 6. 3.2E3F 里面的E/F分别表示什么？")]),v._v(" "),_("ul",[_("li",[v._v("E：科学计数法\t3.2*10（3）")]),v._v(" "),_("li",[v._v("F:表示float类型")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 7. switch（参数） case的参数可以传哪些数据类型？")]),v._v(" "),_("ul",[_("li",[v._v("jdk1.0\t char byte short int"),_("br"),v._v("\njdk5.0   enum(枚举)"),_("br"),v._v("\njdk7.0   String")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 8. do while 和while之间的区别？")]),v._v(" "),_("ul",[_("li",[_("em",[_("strong",[v._v("do while")])]),v._v(" 先执行 然后在判断 保证程序至少执行一次【先斩后奏】")]),v._v(" "),_("li",[_("em",[_("strong",[v._v("while")])]),v._v(" 先判断 符合条件在执行")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("h2",{attrs:{id:"第二天"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第二天"}},[v._v("#")]),v._v(" 第二天")]),v._v(" "),_("p",[v._v("::: details 1. list用过哪些？ArrayList如何排序？list和Set的区别？")]),v._v(" "),_("ul",[_("li",[v._v("用过ArrayList、LinkedList、Vector"),_("br")]),v._v(" "),_("li",[v._v("排序：sort()")])]),v._v(" "),_("blockquote",[_("p",[v._v("List和Set的区别：")]),v._v(" "),_("ol",[_("li",[v._v("List，Set都是继承自Collection接口")]),v._v(" "),_("li",[v._v("List特点：元素放入有顺序，元素可以重复。"),_("br"),v._v("\nSet特点：元素放入无顺序，元素不可重复，重复元素会覆盖。")]),v._v(" "),_("li",[v._v("Set和List对比："),_("br"),v._v("\nSet：检索元素效率低下，删除和插入效率高，删除和插入不会引起元素位置的改变。"),_("br"),v._v("\nList：和数组类似，List可以动态增长，查找元素效率高，增删元素效率低，因为增删元素会引起其他元素位置的改变。")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 2. 异常包括什么？说一下什么是运行时异常、非运行时异常，举例说明。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("异常是指程序运行过程当中出现的例外情况")]),v._v(" "),_("p",[v._v("异常的体系结构：")]),v._v(" "),_("div",{staticClass:"language-mermaid line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("graph TB\n\tThrowable --\x3e Error\n\tThrowable --\x3e Exception\n\tException --\x3e RuntimeException\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])])])]),v._v(" "),_("p",[v._v("异常包括：运行时异常和非运行时异常")]),v._v(" "),_("ul",[_("li",[v._v("运行时异常(RuntimeException)：指编译能通过，直到运行的时候才体现出来")]),v._v(" "),_("li",[v._v("非运行时异常(Exception)：指在编译的时候必须明确该如何处理，否则根本无法通过编译")]),v._v(" "),_("li",[v._v("Error：描述了Java运行时系统的内部错误或资源耗尽错误。大多数错误与代码编写无关，而表示代码运行时JVM出现的问题。应用程序不应该抛出这种类型的对象。")])]),v._v(" "),_("p",[v._v("常见的运行时异常(RuntimeException)有：")]),v._v(" "),_("ol",[_("li",[v._v("IndexOutOfBoundsException（下标越界异常）")]),v._v(" "),_("li",[v._v("NullPointerException（空指针异常）")]),v._v(" "),_("li",[v._v("NumberFormatException（String转换为指定的数字异常）")]),v._v(" "),_("li",[v._v("ArithmeticException（算术异常，如除数为0）")]),v._v(" "),_("li",[v._v("FileNotFoundException（文件未找到异常）")]),v._v(" "),_("li",[v._v("IOException（操作输入流和输出流时可能出现的异常，如磁盘损坏等）")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 3. 线程的实现方式")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("继承Thread类")]),v._v("，重写run方法 (其实Thread类本身也实现了Runnable接口)")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("实现Runnable接口")]),v._v("， 重写run方法。（传入Thread类的构造方法中，由Thread的start启用线程）")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("实现Callable接口")]),v._v("，重写call方法(有抛出异常和有返回值)")]),v._v(" "),_("p",[v._v("通过Callable和FutureTask创建线程，将Callable实现类传入FutureTask构造方法中，由FutureTask的start方法启用线程")])]),v._v(" "),_("li",[_("p",[v._v("通过线程池创建线程")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 4. 怎么处理异常")]),v._v(" "),_("ul",[_("li",[v._v("抛还上级：throws")]),v._v(" "),_("li",[v._v("自行处理：try catch finally")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 5. 多态的实现机制")]),v._v(" "),_("p",[_("strong",[v._v("Java中实现多态的机制靠的是：")]),v._v(" 父类或接口定义的引用变量可以指向子类或具体的实现类的实例对象，而程序调的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。")]),v._v(" "),_("blockquote",[_("p",[v._v("一句话："),_("strong",[v._v("父类或接口引用指向具体的实例对象")])])]),v._v(" "),_("p",[v._v("多态的不同表现形式：方法的重写和重载就是Java多态的不同表现")]),v._v(" "),_("ul",[_("li",[v._v("重写Overriding是父类与子类之间多态的一种表现")]),v._v(" "),_("li",[v._v("重载OverLoding是一个类中多态的一种表现")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 6. Java简单运算面试题")]),v._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("short")]),v._v(" x "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\nx "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" x "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//左边short = 右边int？")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("x"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//报错")]),v._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("short")]),v._v(" y "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\ny "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//y = (short)(y + 1); +=会自动转换")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("y"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//2")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br")])]),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 7. StringBuffer和StringBuilder之间的区别？")]),v._v(" "),_("ul",[_("li",[v._v("StringBuffer和StringBuilder在创建对象的时候 都会多预留16块缓冲区")])]),v._v(" "),_("ol",[_("li",[_("em",[_("strong",[v._v("StringBuffer")])]),v._v(" 同一时间允许一个线程进行访问，"),_("strong",[v._v("效率较低")]),v._v("，但是"),_("strong",[v._v("不会出现并发错误")])]),v._v(" "),_("li",[_("em",[_("strong",[v._v("StringBuilder")])]),v._v(" 同一时间允许多个线程进行访问，"),_("strong",[v._v("效率较高")]),v._v("，但是"),_("strong",[v._v("可能会出现并发错误")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 8.  为什么不把一个类所有的方法全部定义成静态的呢？")]),v._v(" "),_("ul",[_("li",[v._v("静态方法里面只能直接的访问静态成员")]),v._v(" "),_("li",[v._v("如果想要在静态方法里面访问非静态成员的话，需要先创建对象，拿着对象去调用")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("h2",{attrs:{id:"第三天"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第三天"}},[v._v("#")]),v._v(" 第三天")]),v._v(" "),_("p",[v._v("::: details 1. &和&&的区别")]),v._v(" "),_("p",[v._v("&和&&都可以作为逻辑运算符使用")]),v._v(" "),_("p",[v._v("&&"),_("strong",[v._v("有短路特性")]),v._v("，当通过前面条件能够得知最终表达式结论的话，后面的条件会短路掉不做判断，所以"),_("strong",[v._v("效率更高")]),v._v("。&没有短路特性，两边的条件都会进行判断。")]),v._v(" "),_("p",[v._v("另外&还是按位运算符的"),_("strong",[v._v("按位与运算")]),v._v("。当&左右两边连接的是整数类型的时候作为二进制按位与运算，也就是将两个数的二进制位都是1的结果写1。")]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 2. final，finally，finalize的区别")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("final是一个修饰符")]),v._v("，可以用于修饰类、方法、变量")]),v._v(" "),_("p",[v._v("修饰类代表最终类，表示不能被继承"),_("br"),v._v("\n修饰方法代表最终方法，表示此方法不能被覆盖（但是可以被继承）"),_("br"),v._v("\n修饰表示引用地址或值不能被修改")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("finally是异常处理的语法结构")]),v._v("，表示无论是否出现异常最终都要执行的操作。")]),v._v(" "),_("p",[v._v("通常是释放和关闭资源的操作（如数据库连接和文件io流的关闭）")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("finalize是Object类中的一个方法")]),v._v("，表示在gc回收对象之前会调用这个方法")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 3. String和StringBuffer的区别")]),v._v(" "),_("p",[v._v("String和StringBuffer都是Java当中提供的字符串类型，其中String没有预留"),_("strong",[v._v("缓冲空间")]),v._v("，而StringBuffer会在原先内容的基础上预留一部分的缓冲空间。")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("String：")]),v._v(' "a" + "b" 相当于创建了一个新对象，返回值是”ab"。'),_("br"),v._v(" "),_("strong",[v._v("StringBuffer：")]),v._v(' sbuff.append("b")相当于还是在原先的对象上进行修改值。')])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 4. 请说出你所知道的线程同步的方法")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("synchronize修饰符")]),v._v(" "),_("p",[v._v("修饰代码块"),_("br"),v._v("\n修饰方法")])]),v._v(" "),_("li",[_("p",[v._v("java.util.concurrent.locks.ReentrantLock（并发包中的可重入锁）")]),v._v(" "),_("p",[v._v("Lock  lock = new ReentrantLock(); "),_("br"),v._v("\n其中lock.lock()用于上锁，lock.unLock()用于释放锁")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 5. 在Java中，如何跳出当前的多重循环")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("break加循环标签，如：")]),v._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[v._v("example_this"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("for")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("int")]),v._v(" x"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" x"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("10")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" x"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("if")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("break")]),v._v(" example_this"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//结束循环")]),v._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br")])])]),v._v(" "),_("li",[_("p",[v._v("使用return")])]),v._v(" "),_("li",[_("p",[v._v("使用System.exit(0);结束虚拟机")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 6. 接口是否可以继承？抽象类时候可以实现接口？抽象类是否可以继承实体类？")]),v._v(" "),_("p",[_("strong",[v._v("接口可以继承接口")]),v._v("，而且可以多继承，多个接口之间用"),_("code",[v._v(",")]),v._v("隔开；")]),v._v(" "),_("p",[_("strong",[v._v("抽象类可以实现接口")]),v._v("，而且可以暂时不实现接口当中要求的抽象方法，因为抽象类中本身就可以有抽象方法留待子类具体实现；")]),v._v(" "),_("p",[_("strong",[v._v("抽象类可以继承实体类")]),v._v("，如果继承的实体类没有默认的无参构造方法，需要写出抽象类的构造方法并在其构造方法的首行使用super()传参来明确指定调用父类的哪个构造方法。")]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 7. 抽象类是类 有构造方法 但是不能创建对象那么要构造方法的作用？")]),v._v(" "),_("ul",[_("li",[v._v("给子类构造方法首行的super去调用的")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("h2",{attrs:{id:"第四天"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第四天"}},[v._v("#")]),v._v(" 第四天")]),v._v(" "),_("p",[v._v("::: details 1. ==和equals的区别？")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("==：是一个运算符")]),v._v("，用于比较两端的内容是否相等")]),v._v(" "),_("p",[v._v("基本数据类型：两端的值是否相等"),_("br"),v._v("\n引用类型：内存地址是否相等")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("equals：是Object类的一个方法")]),v._v("。子类继承这个方法之后可以按照自己的逻辑需求覆盖这个方法，从而描述自己的比较规则。\n例如：String类就将equals()方法覆盖为比较字符串的内容")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 2. 怎么解决死锁？")]),v._v(" "),_("ul",[_("li",[v._v("wait()，notify()，notifyAll()")])]),v._v(" "),_("p",[v._v("使用 "),_("strong",[v._v("wait()")]),v._v(" 让当前线程(a)放弃锁标记进入等待池当中阻塞，从而成全另外的线程(b)能够成功获得它(b)需要的锁标记之后再调用 "),_("strong",[v._v("notify()")]),v._v(" 或者 "),_("strong",[v._v("notifyAll()")]),v._v(" 唤醒线程(a)，让线程(a)从等待池进入锁池等待获得锁标记")]),v._v(" "),_("blockquote",[_("p",[v._v("[注意这三个方法都必须已经持有锁标记才能调用所以他们只能出现在synchronized代码块当中]")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 3. 线程的生命周期")]),v._v(" "),_("p",[v._v("新生 就绪 运行 消亡 阻塞（等待池 锁池）")]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 4. 线程池")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("可重用的线程池")]),v._v("，方法的参数表示同一时间允许多少个线程并发执行，当线程执行完时，线程将被归还给线程池  "),_("code",[v._v("Executors.newFixedThreadPool(2)")]),v._v(";")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("带缓存机制的线城池")]),v._v("，当线程执行完时，线程将被归还给线程池，如果一分钟之内没有其他线程被提交， 线程将会消亡  "),_("code",[v._v("Executors.newCachedThreadPool()")]),v._v(";")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("单一执行器")]),v._v("：同一时间仅允许一条线程执行  "),_("code",[v._v("Executors.newSingleThreadExcutor()")])])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 5. 简述JDBC中Statement和PrepareStatement的区别")]),v._v(" "),_("ol",[_("li",[v._v("两者同为接口\t, "),_("strong",[v._v("PreparedStatement是Statement的子类")])]),v._v(" "),_("li",[v._v("Statement 只能执行静态语句\nPreparedStatement存在一个强大缓存区，相同的sql语句执行相同语句结构"),_("strong",[v._v("仅仅编译一次")]),v._v("，PreparedStatement仅对改动数据进行修改而不再进行编译，而Statement只要语句发生了改变，则必须重新进行编译")]),v._v(" "),_("li",[v._v("PreparedStatement支持对sql语句使用 "),_("strong",[v._v("?占位符")]),v._v("，杜绝了 sql注入安全隐患")]),v._v(" "),_("li",[v._v("如果sql语句不需要多次执行，或者?过多，则效率可能较Statement低")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 6. 简述 execute() executeUpdate() executeQuery() executeBatch()的使用场合，返回值?")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("返回类型")]),v._v(" "),_("th",[v._v("使用场合")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("execute()")]),v._v(" "),_("td",[v._v("boolean")]),v._v(" "),_("td",[v._v("执行dql语句返回true，dml语句返回false")])]),v._v(" "),_("tr",[_("td",[v._v("executeUpdate()")]),v._v(" "),_("td",[v._v("int")]),v._v(" "),_("td",[v._v("执行dml返回更改记录数，dql立刻报错")])]),v._v(" "),_("tr",[_("td",[v._v("executeQuery()")]),v._v(" "),_("td",[v._v("ResultSet")]),v._v(" "),_("td",[v._v("执行dql语句返回结果集")])]),v._v(" "),_("tr",[_("td",[v._v("executeBatch()")]),v._v(" "),_("td",[v._v("int[]")]),v._v(" "),_("td",[v._v("只能执行dml语句，返回更改的记录数的数组")])])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("h2",{attrs:{id:"第五天"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第五天"}},[v._v("#")]),v._v(" 第五天")]),v._v(" "),_("p",[v._v("::: details 1. Java当中如何实现数据共享~")]),v._v(" "),_("ol",[_("li",[v._v("使用"),_("strong",[v._v("静态变量")]),v._v("完成数据共享")]),v._v(" "),_("li",[v._v("使用"),_("strong",[v._v("参数传递")]),v._v("完成数据共享")]),v._v(" "),_("li",[v._v("使用"),_("strong",[v._v("内部类")]),v._v("完成数据共享")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 2. 为什么要使用内部类？")]),v._v(" "),_("p",[v._v("​\t内部类是Java当中 "),_("u",[v._v("共享数据最最简单的方式之一")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 3. 内部类都有哪几种？")]),v._v(" "),_("p",[v._v("​\t成员内部类、静态内部类、局部内部类、匿名内部类")]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 4. 如何自定义异常和如何主动制造异常出现的场景？")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("自定义异常")]),v._v(" "),_("p",[v._v("自己写一个类型"),_("strong",[v._v("继承Exception")]),v._v(" => 非运行时异常"),_("br"),v._v("\n自己写一个类型"),_("strong",[v._v("继承RuntimeException")]),v._v(" => 运行时异常")])]),v._v(" "),_("li",[_("p",[v._v("如何主动制造异常出现的场景")]),v._v(" "),_("p",[v._v("throw new 异常的类型();")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 5. throw 和 throws 的区别?")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("throw 用在方法体当中")]),v._v(" "),_("p",[v._v("在没有异常出现的情况下主动制造异常出现的场景\n​\t\t"),_("strong",[v._v("[没事找事型]")])])]),v._v(" "),_("li",[_("p",[v._v("throws 用在方法签名的最后")]),v._v(" "),_("p",[v._v("表明本方法当中出现指定种类的异常 本方法不做处理"),_("br"),v._v("抛还给调用的上级进行处理\n​\t\t"),_("strong",[v._v("[有事甩锅型]")])])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 6. 如何控制线程?")]),v._v(" "),_("ol",[_("li",[_("em",[_("strong",[v._v("setPriority(int)")])]),v._v(" : 设置"),_("strong",[v._v("线程优先级别")]),v._v(" 可选范围 1-10 默认5"),_("br"),v._v("优先级越高 代表抢到时间片的概率越高")]),v._v(" "),_("li",[_("em",[_("strong",[v._v("static sleep(long)")])]),v._v(" : 让当前线程"),_("strong",[v._v("休眠")]),v._v("指定的毫秒数")]),v._v(" "),_("li",[_("em",[_("strong",[v._v("static yield()")])]),v._v(" : 让当前线程直接"),_("strong",[v._v("放弃时间片返回就绪")])]),v._v(" "),_("li",[_("em",[_("strong",[v._v("join()")])]),v._v(" : 当前线程邀请另一个线程"),_("strong",[v._v("优先执行")])])]),v._v(" "),_("p",[v._v("::: details 7. 如何解决并发错误?")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("synchronized")]),v._v("(临界资源){执行操作}")]),v._v(" "),_("li",[v._v("可重入锁java.util.concurrent.locks."),_("strong",[v._v("ReentrantLock")])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 8. 如何解决死锁?")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("一块空间 : 等待池")])]),v._v(" "),_("li",[_("p",[v._v("三个方法 :")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("wait()")]),v._v(" : 让当前线程放弃已经持有的锁标记\n并且进入调用方法那个对象等待池当中")]),v._v(" "),_("li",[_("strong",[v._v("notify()")]),v._v(" : 从调用方法的那个对象的等待池当中\n随机的唤醒一个线程")]),v._v(" "),_("li",[_("strong",[v._v("notifyAll()")]),v._v(" : 从调用方法的那个对象的等待池当中\n唤醒所有线程")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("这三个方法不是线程类的 是Object类的"),_("br"),v._v("\n这三个方法必须在已经持有锁标记的前提下才能使用，否则不但失败 还会触发异常")])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 9. 锁池和等待池的区别？")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("进入的时候")]),v._v("是否需要释放锁标记\n"),_("ul",[_("li",[v._v("锁池：不需要 所以可能会造成死锁")]),v._v(" "),_("li",[v._v("等待池：需要 先释放锁标记才能进入等待池")])])]),v._v(" "),_("li",[_("strong",[v._v("离开的时候")]),v._v("是否需要调用方法\n"),_("ul",[_("li",[v._v("锁池：不需要 只要锁标记再度可用")]),v._v(" "),_("li",[v._v("等待池：需要 必须要notify() 或 notifyAll()")])])]),v._v(" "),_("li",[_("strong",[v._v("离开之后")]),v._v("去往何方：\n"),_("ul",[_("li",[v._v("锁池：就绪")]),v._v(" "),_("li",[v._v("等待池：锁池")])])])]),v._v(" "),_("p",[v._v(":::")]),v._v(" "),_("p",[v._v("::: details 10. 流的分类?")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("按照方向分")]),v._v("：输入流 输出流")]),v._v(" "),_("p",[_("strong",[v._v("按照单位分")]),v._v("：字节流 字符流")]),v._v(" "),_("p",[_("strong",[v._v("按照功能分")]),v._v("：节点流 处理流（过滤流、包装流）")])])]),v._v(" "),_("p",[v._v(":::")])],1)}),[],!1,null,null,null);t.default=n.exports}}]);